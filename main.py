import json
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7722288298:AAGbqQX-3ZT12kLKjtoMT-9-ome4P2ie0Qo'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DATA_FOLDER = "users_data"
os.makedirs(DATA_FOLDER, exist_ok=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n\n"
        "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥: /dohod 1000\n"
        "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥: /rashod 500\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å: üìä –ë–∞–ª–∞–Ω—Å\n"
        "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π: üìú –ò—Å—Ç–æ—Ä–∏—è",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

def get_user_file(user_id):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    return os.path.join(DATA_FOLDER, f"{user_id}.json")

def load_transactions(user_id):
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    file_path = get_user_file(user_id)
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)
    return []

def save_transactions(user_id, transactions):
    """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    file_path = get_user_file(user_id)
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(transactions, file, indent=4)

@dp.message(Command("dohod"))
async def add_income(message: types.Message):
    await process_transaction(message, is_income=True)

@dp.message(Command("rashod"))
async def add_expense(message: types.Message):
    await process_transaction(message, is_income=False)

async def process_transaction(message: types.Message, is_income: bool):
    """ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ """
    try:
        amount = float(message.text.split()[1])  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if amount <= 0:
            raise ValueError

        user_id = message.from_user.id
        transactions = load_transactions(user_id)
        transactions.append(amount if is_income else -amount)
        save_transactions(user_id, transactions)

        operation = "–î–æ—Ö–æ–¥" if is_income else "–†–∞—Å—Ö–æ–¥"
        await message.answer(f"‚úÖ {operation} {amount} –¥–æ–±–∞–≤–ª–µ–Ω!")
    except (IndexError, ValueError):
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /dohod 1000 –∏–ª–∏ /rashod 500", parse_mode="Markdown")

@dp.message(lambda message: message.text == "üìä –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    user_id = message.from_user.id
    transactions = load_transactions(user_id)
    balance = sum(transactions)

    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}")

@dp.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history(message: types.Message):
    user_id = message.from_user.id
    transactions = load_transactions(user_id)

    if not transactions:
        await message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    history_text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π:\n" + "\n".join(
        [f"{'‚ûï' if amount > 0 else '‚ûñ'} {abs(amount)}" for amount in transactions[-5:]]
    )

    await message.answer(history_text)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    dp.run_polling(bot)
